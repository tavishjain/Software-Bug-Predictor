#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson


# Boiler Plate code
use base ("Understand::Codecheck");
use strict;


# This is the error that will be returned when a violation is found
use constant ERR1 => 'Member function %1 can be made static, but is not static';
use constant ERR2 => 'Member function %1 can be made const, but is not const';


# This registers ERR1 with Understand
sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

sub checkID { return "MISRA08_9-3-3";}



# This is the short error the Understand will use
sub name { return "9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const";}


# This is the full description of the rule being tested
sub description { return "9-3-3 (Required) If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const.";}


# This section returns the rational and examples to be given to the user through Understand
sub detailed_description { return <<"END_DESC"

<p><b>Rationale</b><br>
Declaring a member function static or const limits its access to the non-static data members.
This helps to prevent unintentional modification of the data, and facilitates compliance with
Rule 7–1–1.</p>
<br>

<b>Example</b><pre style="margin-top:0;padding-top:0;">

  class A
  {
  public:
    int16_t f1 ( )    // Non-compliant – can be const
    {
      return m_i;
    }
    int16_t f2 ( )    // Non-compliant – can be static
    {
      return m_s;
    }
    int16_t f3 ( )    // Compliant – cannot be const or static
    {
      return ++m_i;
    }
  private:
    int16_t m_i;
    static int16_t m_s;
  };

</pre>

END_DESC
}


# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}


# This determines if this script is per file
sub test_entity { return 1;}


# This determines if this script is per project or per file
sub test_global { return 0;}


# Any defined options go here
sub define_options{
  my $check = shift;
  $check->option->checkbox( 'exception', 'Ignore function Overrides', 0 );
  $check->option->checkbox( 'ignoreVirtual', 'Ignore Virtual functions', 1 );
  $check->option->checkbox( 'scope', 'Treat member objects passed to another function as modified', 0 );
}


# This is the actual test being performed on the user's code
sub check {

  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift; 
  my $file = shift;
  return unless $file->kind->check( "c file");
  
  # Pull a list of all Methods that are defined within this file
  my @methodsDefined;
  if ( $check->option->lookup( 'exception' ) ) {
    @methodsDefined = $file->filerefs( 'Define', 'Member Function ~Static ~Const ~Virtual' );
  } else {
    @methodsDefined = $file->filerefs( 'Define', 'Member Function ~Static ~Const' );
  }
  
  return unless @methodsDefined;

  METH : foreach my $method ( @methodsDefined ) {

    # Skip constructors and destructors
    next if $method->ent->longname eq $method->ent->name . '::' . $method->ent->name;
    next if $method->ent->longname =~ /\~/;

    # Skip operator overloads
    next if $method->ent->name =~ /operator(\+|\-|\*|\/|\%|\^|\&|\||\~|\!|\=|\<|\>|\+\=|\-\=|\*\=|\/\=|\&\=|\|\=|\<\<|\>\>|\<\<\=|\>\>\=|\=\=|\!\=|\<\=|\>\=|\&\&|\|\||\+\+|\-\-|\,|\-\>\*|\-\>|\(\)|\[\])/;

    # If option is checked, ignore methods that override other methods
    if ( $check->option->lookup( 'exception' ) ) {
      next if $method->ent->ref( 'Overrides' );
    }

    # Test if method can be static, throw error if so
    if ( canBeStatic ( $method ) ) {

      $check->violation( $method->ent, $method->file, $method->line, $method->column, ERR1, $method->ent->name );
      next METH;

    # Test if method can be const, throww error if so
    } elsif ( canBeConst ( $method, $check ) ) {

      $check->violation( $method->ent, $method->file, $method->line, $method->column, ERR2, $method->ent->name );
      next METH;

    }
  }
}


sub canBeStatic {

  my $ref = shift;
  my $passed = 1;

  # Pull the contents of the function
  my $text = $ref->ent->contents;
  # Remove any // style comments
  $text =~ s/\/\/.*?\n/\n/g;
  # Remove any /* */ style comments
  $text =~ s/\/\*.*?\*\//\n/gs;

  $passed = 0 if $text =~ /this\-\>/;
  $passed = 0 if $ref->ent->kindname =~ /\bVirtual\b/;

  my @useRefs = $ref->ent->refs( 'Use' );
  foreach my $use ( @useRefs ) {

    $passed = 0 if $use->ent->kindname !~ /\bStatic\b/;

  }

  my @setRefs = $ref->ent->refs( 'Set' );
  foreach my $set ( @setRefs ) {

    $passed = 0 if $set->ent->kindname !~ /\bStatic\b/;

  }

  my @callRefs = $ref->ent->refs( 'Call' );
  foreach my $call ( @callRefs ) {

    $passed = 0 if $call->ent->kindname !~ /\bStatic\b/;

  }

  return $passed;
}


sub canBeConst {

  my $ref = shift;
  my $check = shift;
  my $passed = 1;

  my @modifies = $ref->ent->refs( 'Modify' );
  my @sets = $ref->ent->refs( 'Set' );
  push ( @modifies, @sets );

  foreach my $mods ( @modifies ) {

    $passed = 0 if $mods->ent->kind->longname =~ /\bMember\b/;

  }

  my @callRefs = $ref->ent->refs( 'Call' );
  foreach my $call ( @callRefs ) {

    $passed = 0 if $call->ent->kindname !~ /\bConst\b/;

  }

  if ( $passed and $check->option->lookup( 'scope' ) ) {

    $passed = checkUses( $ref );

  }

  return $passed;
}


# This subroutine takes a parameter and checks use references to see if they are passed out of scope ( Trivial Cases only )
sub checkUses {

  # Pull my incoming parameter and all associated useby references
  my $method = shift;
  my @allUseBy = $method->ent->refs( 'C Useby' );

  foreach my $useBy ( @allUseBy ) {

    next if $useBy->ent->kind->longname =~ /\bMember\b/;

    # Loop through each useBy reference and move backwards to detect form a = b
    my $lexeme = $useBy->lexeme( 1, 8, 1, 1 );

    while( ! ( $lexeme->text eq '=' or $lexeme->text eq '(' ) ) {
      $lexeme = $lexeme->prevUseful;
    }

    $lexeme = $lexeme->prevUseful;
    next unless $lexeme->ref;

    # Return success of we are setting a non const data member or non const global object
    return 1 if $lexeme->ref->scope->kind->check( 'C Function' );

  }
  return 0;
}