# This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson
# 1-23-15


# Boiler Plate code
use base ( 'Understand::Codecheck' );
use strict;


# This is the error that will be returned when a violation is found
use constant ERR1 => 'Goto Statement used';


# This registers ERR1 with Understand
sub register_tr_text {

  my $check = shift;
  $check->add_tr_text(ERR1);
}

sub checkID { return "MISRA12_15.1";}


# This is the short error the Understand will use
sub name{
  return '15.1 The goto statement should not be used';
}


# This is the full description of the rule being tested
sub description {
  return '15.1 ( Advisory ) The goto statement should not be used.';
}


# This section returns the rational and examples to be given to the user through Understand
sub detailed_description {
  return  <<"END_DESC"

<p><b>Rationale</b><br>
Unconstrained use of goto can lead to programs that are unstructured and extremely difficult to
understand.
</p>

<p>
In some cases a total ban on goto requires the introduction of flags to ensure correct control flow,
and it is possible that these flags may themselves be less transparent than the goto they replace.
Therefore, if this rule is not followed, the restricted use of goto is allowed where that use follows the
guidance in Rule 15.2 and Rule 15.3.
</p>

<p><b>See also</b><br>
Rule 9.1, Rule 15.2, Rule 15.3, Rule 15.4
</p>

END_DESC
}


# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language eq "C++";
}


# This determines if this script is run per file
sub test_entity {
  return 1;
}


# This determines if this script is run on the whole project
sub test_global {
  return 0;
}


# Any defined options go here
sub define_options {
}


# This is the actual test being performed on the user's code
sub check {

  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift; 
  my $file = shift;
  return unless $file->kind->check( 'C File' );

  # Pull text of the file
  my $text = $file->contents;
  # Remove any // style comments
  $text =~ s/\/\/.*?\n/\n/g;
  # Remove any /* */ style comments
  $text =~ s/\/\*.*?\*\//\n/gs;

  # Skip this file unless the word restrict exists
  return unless $text =~ /\bgoto|goto\b/;

  # Find the restrict usage and throw an error
  my $lexer = $file->lexer( 0 );
  my @lexemes = $lexer->lexemes if $lexer;
  
  foreach my $lexeme ( @lexemes ){
    $check->violation( $file, $file, $lexeme->line_begin, $lexeme->column_begin, ERR1 ) if $lexeme->token eq 'Keyword' and $lexeme->text eq 'goto';
  }  
}