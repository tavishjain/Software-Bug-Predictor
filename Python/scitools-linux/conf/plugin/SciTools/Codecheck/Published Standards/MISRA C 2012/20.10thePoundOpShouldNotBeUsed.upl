#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson

# Boiler Plate code
use base ("Understand::Codecheck");
use strict;

# This is the error that will be returned when a violation is found
use constant ERR1 => 'A # or ## operator used in a macro in file %1';

# This registers ERR1 with Understand
sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

sub checkID { return "MISRA12_20.10";}


# This is the short error the Understand will use
sub name { return "20.10 The # and ## preprocessor operators should not be used";}

# This is the full description of the rule being tested
sub description { return "20.10 (Advisory) The # and ## preprocessor operators should not be used.";}

# This section returns the rational and examples to be given to the user through Understand
sub detailed_description { return <<"END_DESC"
<p><b>Rationale</b>
The order of evaluation associated with multiple #, multiple ## or a mix of # and ## preprocessor
operators is unspecified. In some cases it is therefore not possible to predict the result of macro
expansion.
</p>

<p>
The use of the ## operator can result in code that is obscure
</p>

<p>
Note: Rule 1.3 covers the undefined behaviour that arises if either:
</p>

<ul>
<li>
The result of a # operator is not a valid string literal; or
</li>
<li>
The result of a ## operator is not a valid preprocessing token.
</li>
</ul>

END_DESC
}

# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}

# This determines if this script is per file
sub test_entity { return 1;}

# This determines if this script is per project or per file
sub test_global { return 0;}

# Any defined options go here
sub define_options{}

# This is the actual test being performed on the user's code
sub check {
  # Pull the name of the check and the name of the file from the incoming script request
  my $check = shift; 
  my $file = shift;
  return unless $file->kind->check("c file ~unknown ~unresolved");
  
  # Loop through all macros and see if the # or ## operator are being used.
  foreach my $macro($file->filerefs("define","macro",1)){
    if($macro->ent->value =~ /[^#]+#[^#]+/ || $macro->ent->value =~ /[^#]+##[^#]+/ || $macro->ent->value =~ /#[^#]+/ ||
	   $macro->ent->value =~ /[^#]+#/){
 	  $check->violation($macro->ent,$file,$macro->line,$macro->column,ERR1,$file->name);
 	}
  }
}
