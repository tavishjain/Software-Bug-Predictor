# This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson
# 6-19-15


# Boiler Plate code
use base ("Understand::Codecheck");
use strict;


# This is the error that will be returned when a violation is found
use constant ERR1 => 'Comment appears to contain code in or near %1';


# This registers ERR1 with Understand
sub register_tr_text() {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

sub checkID { return "MISRA12_4.4";}



# This is the short error the Understand will use
sub name { 
  return 'Directive 4.4 Sections of code should not be "commented out"';
}


# This is the full description of the rule being tested
sub description { 
  return 'Directive 4.4 ( Advisory ) Sections of code should not be "commented out".';
}


# This section returns the rational and examples to be given to the user through Understand
sub detailed_description { return <<"END_DESC"

<p><b>Amplification</b><br>
This rule applies to both // and /* ... */ styles of comment.
</p>

<p><b>Rationale</b><br>
Where it is required for sections of source code not to be compiled then this should be achieved
by use of conditional compilation ( e.g. #if or #ifdef constructs with a comment ). Using start and end
comment markers for this purpose is dangerous because C does not support nested comments, and
any comments already existing in the section of code would change the effect.
</p>

<p><b>See also</b><br>
Rule 3.1, Rule 3.2
</p>

END_DESC
}


# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/; #Handles C and C++
}


# This determines if this script is per file
sub test_entity { 
  return 1;
}


# This determines if this script is per project or per file
sub test_global { 
  return 0;
}


# Any defined options go here
sub define_options{
  my $check = shift;
  $check->option->radio_vert("strict","Aggresivness",["More Aggresive - may result in false positives, comments that are not really code", "Less Aggressive - may result in missing instances of commented code"],"Less Aggressive - may result in missing instances of commented code");
}


sub check {
  my $check = shift; 
  my $file = shift; 
  return unless $file->kind->check("c file"); 
    
  my @keywords = qw(double not_eq throw and_eq dynamic_cast operator true asm try auto enum or_eq typedef bitand explicit private typeid bitor extern protected typename bool false public union float register unsigned case reinterpret-cast using catch friend virtual char goto short void class signed volatile compl inline sizeof wchar_t const int static const-cast long static_cast xor continue mutable struct xor_eq default namespace switch delete new template);
  my @strongKeywordsRegExp = ('for\s*\(' , 'while\s*\(' , 'if\s*\(');
  my @preProc = ("#include", "#define", "#endif","#ifndef", "#ifdef");
  my @strongLineEnds = (";","{");
  my @maybeLineEnds = (")");
  my $multiRatio = .4;
  
  my $lexer = $file->lexer;
  return unless $lexer;
  
  my $lexeme = $lexer->first;
  return unless $lexeme;
  my $reported = 0;
  LEXEME:foreach my $lexeme($lexer->lexemes()){
    $reported=0 unless $lexeme->token =~ /Comment|Whitespace|Newline/;
    next LEXEME unless $lexeme->token eq "Comment";
    my $comment = $lexeme->text;
    next LEXEME if $comment =~ '^//';
    $comment =~ s'^/\*|^//|\*/$''g; #Strip comment character

  my $isCode = 0;
  my $maybeCode =0;
  my $lineNum=$lexeme->line_begin;
  my $codeLine=0;
  my $strict = $check->option->lookup("strict") =~ /More Aggresive/;
  #consider each line of the comment separately
  LINE:foreach my $line (split('\n',$comment)){
    my ($strongCode, $strongEnd,$weakCode, $weakEnd,$preproc);
    $line =~ s/^\s+//; #trim leading whitespace
    $line =~ s/\s+$//; #trim trailing whitespace
    
    #Test for preprocessors in comments
    foreach my $word (@preProc){
      $preproc = 1 if $line =~ /\Q$word/;
    }
    
    #Test for strong keyword match
    foreach my $test (@strongKeywordsRegExp){
      $strongCode = 1 if $line =~ /(?<!\w)$test/;
    } 
    
    #Test the comment line has a strong line/statement ending
    foreach my $char (@strongLineEnds){
      $strongEnd = 1 if $line =~ /\Q$char\E$/;
    }
    
    #Test the comment line has a weak line/statement ending
    foreach my $char (@maybeLineEnds){
      $weakEnd = 1 if $line =~ /\Q$char\E$/;
    }
    
    #Test that the comment line has weak statements
    foreach my $word (@keywords){   
      $weakCode = 1 if $line =~ /(?<!\w)\Q$word\E(?!\w)/;
    }
    if($strict){
      $isCode = 1 if $preproc || $strongCode || $strongEnd;
      $isCode =1 if $weakCode && $weakEnd;
      $maybeCode ++ if ($weakCode || $weakEnd) && ! $isCode;
    
    }else{
    $isCode = 1 if $preproc;
    $isCode = 1 if $strongCode && ($strongEnd || $weakEnd);
    $isCode = 1 if $weakCode && $strongEnd;
    $maybeCode++ if $weakCode && $weakEnd;
    }
    
    $codeLine= $lineNum if $isCode;
    last LINE if $isCode;
    
    
  }continue{
    $lineNum++;
  }
  
  my $totalLines = ($lineNum - $lexeme->line_begin);
  $isCode = 1 if $maybeCode && $totalLines > 2 && (($maybeCode / $totalLines) > $multiRatio);

    my $searchLex = $lexeme;
    while ($searchLex && ! $searchLex->ent){
        $searchLex = $searchLex->previous;
    }
    my $ent=$file;
    $ent = $searchLex->ent if ($searchLex);
  
    if (!$reported && $isCode){
      $check->violation(0,$file,$codeLine,-1,ERR1, $ent->name);
      $reported=1;
    }
  }
}