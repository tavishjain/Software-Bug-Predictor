# This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson
# 11-5-14


# Boiler Plate code
use base ( 'Understand::Codecheck' );
use strict;


# This is the error that will be returned when a violation is found
use constant ERR1 => 'Declaration or Definition of %1 is not compatible with another declaration or definition in file %2 on line %3';


# This registers ERR1 with Understand
sub register_tr_text {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

sub checkID { return "MISRA12_8.3";}



# This is the short error the Understand will use
sub name{
  return '8.3 All declarations of an object or function shall use the same names and type qualifiers';
}


# This is the full description of the rule being tested
sub description {
  return '8.3 (Global)( Required ) All declarations of an object or function shall use the same names and type qualifiers.';
}


# This section returns the rational and examples to be given to the user through Understand
sub detailed_description {
  return  <<"END_DESC"

<p><b>Amplification</b><br>
Storage class specifiers are not included within the scope of this rule.
</p>

<p><b>Rationale</b><br>
Using types and qualifiers consistently across declarations of the same object or function encourages
stronger typing.
</p>

<p>
Specifying parameter names in function prototypes allows the function defi nition to be checked for
interface consistency with its declarations.
</p>

<p><b>Exception</b><br>
Compatible versions of the same basic type may be used interchangeably. For example, int, signed and
signed int are all equivalent.
</p>

<p><b>Example</b><br>
</p>

<pre style="margin-top:0;padding-top:0;">

  extern void f ( signed int );
         void f (        int );   /* Compliant - Exception */
  extern void g ( int * const );
         void g ( int *       );  /* Non-compliant - type qualifiers */

</pre>

<p>
<i>Note</i>: all the above are not compliant with Dir 4.6.
</p>

<pre style="margin-top:0;padding-top:0;">

  extern int16_t func ( int16_t num, int16_t den );

  /* Non-compliant - parameter names do not match */
  int16_t func ( int16_t den, int16_t num )
  {
    return num / den;
  }

</pre>

<p>
In this example the definition of area uses a different type name for the parameter h from that used
in the declaration. This does not comply with the rule even though width_t and height_t are the
same basic type.
</p>

<pre style="margin-top:0;padding-top:0;">

  typedef uint16_t width_t;
  typedef uint16_t height_t;
  typedef uint32_t area_t;

  extern area_t area ( width_t w, height_t h );

  area_t area ( width_t w, width_t h )
  {
    return ( area_t ) w * h;
  }

</pre>

<p>
This rule does not require that a function pointer declaration use the same names as a function
declaration. The following example is therefore compliant.
</p>

<pre style="margin-top:0;padding-top:0;">

  extern void f1 ( int16_t x );
  extern void f2 ( int16_t y );

  void f ( bool_t b )
  {
    void ( *fp1 ) ( int16_t z ) = b ? f1 : f2;
  }

</pre>

<p><b>See also</b><br>
Rule 8.4
</p>

<p><b>Developer's Note</b><br>
This check's ability to test compatibility between types is some what limited. This check cannot
test campatibility between non basic types. While checking compatibility between basic types, this
check assumes the format ( Optional signed/unsigned ) ( Type ) ( Optional int ). Also, this check
cannot test compatibility between types of objects.
</p>

<p>
E.g. signed long int<br>
E.g. short int<br>
E.g. unsigned long long<br>
</p>

END_DESC
}


# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language eq "C++";
}


# This determines if this script is per file
sub test_entity {
  return 0;
}


# This determines if this script is per project or per file
sub test_global {
  return 1;
}


# Any defined options go here
sub define_options {
}


# Trim leading and trailing space
sub trim {

  my $string = shift;
  $string =~ s/^\s+|\s+$|\r//g;
  return $string;

}


sub compatibilityTest {

  # Pull incoming strings
  my $stringA = shift;
  my $stringB = shift;

  # Perturb string A
  # Convert unsigned long longs
  $stringA =~ s/\bunsigned\slong\slong\sint/ulli/g;
  $stringA =~ s/\bunsigned\slong\slong/ulli/g;

  # Convert long longs
  $stringA =~ s/\bsigned\slong\slong\sint/slli/g;
  $stringA =~ s/\bsigned\slong\slong/slli/g;
  $stringA =~ s/\blong\slong\sint/slli/g;
  $stringA =~ s/\blong\slong/slli/g;

  # Convert unsinged longs
  $stringA =~ s/\bunsigned\slong\sint/uli/g;
  $stringA =~ s/\bunsigned\slong/uli/g;

  # Convert longs
  $stringA =~ s/\bsigned\slong\sint/sli/g;
  $stringA =~ s/\bsigned\slong/sli/g;
  $stringA =~ s/\blong\sint/sli/g;
  $stringA =~ s/\blong/sli/g;

  # Convert unsigned shorts
  $stringA =~ s/\bunsigned\sshort\sint/usi/g;
  $stringA =~ s/\bunsigned\sshort/usi/g;

  # Convert shorts
  $stringA =~ s/\bsigned\sshort\sint/ssi/g;
  $stringA =~ s/\bsigned\sshort/ssi/g;
  $stringA =~ s/\bshort\sint/ssi/g;
  $stringA =~ s/\bshort/ssi/g;
  
  # Convert unsigned int
  $stringA =~ s/\bunsigned\sint/ui/g;
  $stringA =~ s/\bunsigned/ui/g;

  # Convert int
  $stringA =~ s/\bsigned\sint/si/g;
  $stringA =~ s/\bint/si/g;
  $stringA =~ s/\bsigned/si/g;

  # Perturb string B
  # Convert unsigned long longs
  $stringB =~ s/\bunsigned\slong\slong\sint/ulli/g;
  $stringB =~ s/\bunsigned\slong\slong/ulli/g;

  # Convert long longs
  $stringB =~ s/\bsigned\slong\slong\sint/slli/g;
  $stringB =~ s/\bsigned\slong\slong/slli/g;
  $stringB =~ s/\blong\slong\sint/slli/g;
  $stringB =~ s/\blong\slong/slli/g;

  # Convert unsinged longs
  $stringB =~ s/\bunsigned\slong\sint/uli/g;
  $stringB =~ s/\bunsigned\slong/uli/g;

  # Convert longs
  $stringB =~ s/\bsigned\slong\sint/sli/g;
  $stringB =~ s/\bsigned\slong/sli/g;
  $stringB =~ s/\blong\sint/sli/g;
  $stringB =~ s/\blong/sli/g;

  # Convert unsigned shorts
  $stringB =~ s/\bunsigned\sshort\sint/usi/g;
  $stringB =~ s/\bunsigned\sshort/usi/g;

  # Convert shorts
  $stringB =~ s/\bsigned\sshort\sint/ssi/g;
  $stringB =~ s/\bsigned\sshort/ssi/g;
  $stringB =~ s/\bshort\sint/ssi/g;
  $stringB =~ s/\bshort/ssi/g;
  
  # Convert unsigned int
  $stringB =~ s/\bunsigned\sint/ui/g;
  $stringB =~ s/\bunsigned/ui/g;

  # Convert int
  $stringB =~ s/\bsigned\sint/si/g;
  $stringB =~ s/\bint/si/g;
  $stringB =~ s/\bsigned/si/g;

  return ( trim ( $stringA ) eq trim ( $stringB ) );

}


# This is the actual test being performed on the user's code
sub check {

  # Pull all functions and objects, return if neither
  my $check = shift;
  my @functionsDefined = $check->db->ents( 'C Function ~Member' );
  my @objectsDefined = $check->db->ents( 'C Object Global' );
  return unless @functionsDefined;

  # Test all functions
  foreach my $function ( @functionsDefined ) {

    # Skip built in functions
    next if $function->name =~ /^__/;

    # Pull all define and declare references and set up error tracking
    my @functionDeclares = $function->refs ( 'C Declarein ~Using, C Definein' );
    my $originalSig = '';
    my $originalFile = '';
    my $originalLine = '';

    # Loop through each declaration and definition
    DEC : foreach my $declare ( @functionDeclares ) {

      # Build the signature into a string
      my $sig = '';
      my $lexeme = $declare->lexeme( 1, 8, 1, 0 );
      next DEC unless $lexeme;
      my $count = 0;

      # This is a special case to handle ( Identifier ) ( Parameters ) type declarations
      if ( $lexeme->prevUseful and ( $lexeme->prevUseful->text eq '(' and $lexeme->nextUseful->text eq ')' ) ) {
        $lexeme = $lexeme->nextUseful;
        $lexeme = $lexeme->nextUseful;
      }

      while ( $lexeme->text ne '{' and ! ( $lexeme->text eq ')' and $count == 1 ) ) {

        $count++ if $lexeme->text eq '(';
        $count-- if $lexeme->text eq ')';

        # There is a strange scenario I enountered functional MACRO heavy would break this check wide open. 
        # I could not find a solution. This is a special case to try and not check those instances.
        next DEC if $count < 0;

        # This is another case of function MACROs being used to build definitions and declarations that needs to be ignored
        if ( $lexeme->token eq 'Identifier' and $lexeme->ent ) {
          next DEC if $lexeme->ent->kind->check( 'Macro' );
        }

        if ( $lexeme->token eq 'Keyword' ) {

          $sig .= $lexeme->text;
          $sig .= ' ';

        } else {

          $sig .= $lexeme->text;

        }

        $lexeme = $lexeme->nextUseful;

      }


      # Set reference if this is the first time through the loop
      if ( $originalSig eq '' ) {

        $originalSig = trim ( $sig );
        $originalFile = $declare->file->name;
        $originalLine = $declare->line;

      # Otherwise compare the signatures to see if there is an error
      } else {

        next if trim ( $sig ) eq $originalSig;
        my $ok = compatibilityTest ( $originalSig, $sig );
        $check->violation( $function, $declare->file, $declare->line, $declare->column, ERR1, $function->name, $originalFile, $originalLine ) unless $ok;

      }
    }
  }


  # Test all objects
  foreach my $object ( @objectsDefined ) {

    # Make sure our object has a type
    my $type = $object->type;
    next unless $type;
    $type =~ s/\[.*//;

    # Pull a define and all declare references
    my $defineRef = $object->ref ( 'C Definein' );
    my @declares = $object->refs ( 'C Declarein' );
    next unless $defineRef and @declares;

    # Loop through all declare references
    DEC : foreach my $declare ( @declares ) {

      # Sometimes Define references have mirror declare references
      next if $defineRef->file->name eq $declare->file->name;

      my $lexeme = $declare->lexeme;

      # Move the lexeme back until we see the keyword extern
      while ( $lexeme->prevUseful and $lexeme->prevUseful->text ne 'extern' ) {

        # If we see a Macro first, abort. 
        if ( $lexeme->token eq 'Identifier' and $lexeme->ent ) {
          next DEC if $lexeme->ent->kind->longname =~ /\bMacro\b/;
        }

        $lexeme = $lexeme->prevUseful;

      }
      next DEC unless $lexeme->text eq 'extern';

      my $declareString = '';

      # Build my kind string as it is written in the file
      while ( $lexeme->text ne $object->name ) {

        # Special case if we see a comma seperated list
        if ( $lexeme->text eq ',' ) {

          $declareString =~ s/\b\w+\s+$//g;

        } else {

          $declareString .= $lexeme->text . ' ';

        }

        $lexeme = $lexeme->nextUseful;

      }

      # Test kind string vas type associated with ent
      next if trim ( $declareString ) eq $type;
      my $ok = compatibilityTest ( trim ( $type ), trim ( $declareString ) );
      $check->violation( $object, $declare->file, $declare->line, $declare->column, ERR1, $object->name, $defineRef->file->name, $defineRef->line ) unless $ok;

    }

  }
}