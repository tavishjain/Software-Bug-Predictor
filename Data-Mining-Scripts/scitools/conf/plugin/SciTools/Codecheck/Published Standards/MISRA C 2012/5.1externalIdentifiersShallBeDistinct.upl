#This script is designed to run with Understand - CodeCheck
# Written by Kyle Jackson
# 9-23-14


# Boiler Plate code
use base ("Understand::Codecheck");
use strict;


# This is the error that will be returned when a violation is found
use constant ERR1 => "Non distinct external identifier %1 conflicts with entity %2 in file %3";


# This registers ERR1 with Understand
sub register_tr_text {
  my $check = shift;
  $check->add_tr_text(ERR1);
}

sub checkID { return "MISRA12_5.1";}



# This is the short error the Understand will use
sub name{
  return '5.1 External identifiers shall be distinct';
}


# This is the full description of the rule being tested
sub description {
  return "5.1 (Global)( Required ) External identifiers shall be distinct.";
}


# This section returns the rational and examples to be given to the user through Understand
sub detailed_description {
  return  <<"END_DESC"

<p><b>Amplification</b><br>
This rule requires that different <i>external identifiers</i> be distinct within the limits imposed by the
implementation.
</p>

<p>
The definition of distinct depends on the implementation and on the version of the C language that
is being used:
</p>

<p>
• In C90 the <strong>minimum</strong> requirement is that the first 6 characters of <i>external identifiers</i> are
significant but their case is not required to be significant;
</p>

<p>
• In C99 the <strong>minimum</strong> requirement is that the first 31 characters of <i>external identifiers</i> are
significant, with each universal character or corresponding extended source character
occupying between 6 and 10 characters.
</p>

<p>
In practice, many implementations provide greater limits. For example it is common for <i>external
identifiers</i> in C90 to be case-sensitive and for at least the first 31 characters to be significant.
</p>

<p><b>Rationale</b><br>
If two identifiers differ only in non-significant characters, the behaviour is undefined.
</p>

<p>
If portability is a concern, it would be prudent to apply this rule using the minimum limits specifi ed in
The Standard.
</p>

<p>
Long identifiers may impair the readability of code. While many automatic code generation systems
produce long identifiers, there is a good argument for keeping identifier lengths well below this limit.
</p>

<p>
<i>Note</i>: In C99, if an extended source character appears in an <i>external identifier</i> and that character does
not have a corresponding universal character, The Standard does not specify how many characters
it occupies.
</p>

<p><b>Example</b><br>
In the following example, the definitions all occur in the same translation unit. The implementation in
question supports 31 significant case-sensitive characters in <i>external identifiers</i>.
</p>

<pre style="margin-top:0;padding-top:0;">

  /*      1234567890123456789012345678901*********  Characters */
  int32_t engine_exhaust_gas_temperature_raw;
  int32_t engine_exhaust_gas_temperature_scaled;    /* Non-compliant */
  /*      1234567890123456789012345678901*********  Characters */
  int32_t engine_exhaust_gas_temp_raw;
  int32_t engine_exhaust_gas_temp_scaled;           /* Compliant */

</pre>

<p>
In the following non-compliant example, the implementation supports 6 significant case-insensitive
characters in <i>external identifiers</i>. The identifiers in the two translation units are different but are not
distinct in their significant characters.
</p>

<pre style="margin-top:0;padding-top:0;">

  /* file1.c */
  int32_t abc = 0;

  /* file2.c */
  int32_t ABC = 0;

</pre>

<p><b>See also</b><br>
Dir 1.1, Rule 5.2, Rule 5.4, Rule 5.5
</p>

END_DESC
}


# This section defines the programming language this script is testing
sub test_language {
  my $language = shift;
  return $language eq "C++";
}


# This determines if this script is per file
sub test_entity {
  return 0;
}


# This determines if this script is per project or per file
sub test_global {
  return 1;
}


# Any defined options go here
sub define_options{
  my $check = shift;
  $check->option->checkbox( 'C99', 'Use C99 standard? ( C90 default )', 0 );
}


# Subroutine to get the length of significant characters
sub getLength {

  # Set the length of the string to be tested based off the user selected option
  my $check = shift;
  my $length;
  if  ( $check->option->lookup( 'C99' ) ) {
    $length = 31;
  } else {
    $length = 6
  }
  return $length

}


# Create a sub string of length of significant characters
sub makeSubstring {

  # Create the substring of the entity name to compare to other entities
  my $check = shift;
  my $name = shift;
  my $subString = substr ( $name, 0, getLength( $check ) );
  if  ( ! $check->option->lookup( 'C99' ) ) {
    $subString = lc ( $subString );
  }
  return $subString;

}


# Check all the functions entities
sub checkGlobal {

  # Pull in the check and the array of functions
  my $functions = shift;
  my $check = shift;
  my @globalsDefined = @{$_[0]};
  my %patternsSeen = ();

  # Loop through each global entity
  FNC : foreach my $global ( @globalsDefined ) {

    # Skip this entity if it is unresolved and undeclared
    next FNC unless $global->ref();
    next FNC if $global->kind->longname =~ /Unresolved/ and ! $global->ref( 'C Declarein' );

    # Create a sub string
    my $subString = makeSubstring( $check, $global->name );
    if ( exists $patternsSeen{ $subString } ) {

      my $entity = $patternsSeen{ $subString };
      my $reference = $entity->ref( 'C Definein, C Declarein' );
      my $otherReference = $global->ref( 'C Definein, C Declarein' );

      next FNC if $functions and $entity->name eq $global->name;
      next FNC unless $reference and $otherReference;
      $check->violation( $reference->scope, $reference->file, $reference->line, $reference->column, ERR1, $reference->scope->name, $otherReference->scope->name, $otherReference->file->name );

    } else {

      $patternsSeen{ $subString } = $global;

    }

  }

}


# This is the actual test being performed on the user's code
sub check {

  # Pull the check from understand, retrieve our global entities from the database and check our options
  my $check = shift;
  my @typesDefined = $check->db->ents( 'C type ~static ~local ~member ~unnamed ~tmplateparameter ~parameter' );
  my @functionsDefined = $check->db->ents( 'C function ~static ~local ~member ~unnamed' );
  my @objectsDefined = $check->db->ents( 'C object ~static ~local ~member ~unnamed' );

  # Check each group of global objects
  checkGlobal( 0, $check, \@typesDefined );
  checkGlobal( 1, $check, \@functionsDefined );
  checkGlobal( 0, $check, \@objectsDefined );

}
