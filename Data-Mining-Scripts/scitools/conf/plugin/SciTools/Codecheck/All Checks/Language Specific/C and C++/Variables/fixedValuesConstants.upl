use base ("Understand::Codecheck");
use strict;
use constant ERR1 => 'Fixed Value(%1) used incorrectly';
use experimental 'smartmatch';

sub register_tr_text {
  my $check = shift;
  $check->add_tr_text(ERR1);
}



sub checkID { return "CPP_V000";}

sub name {
  return "Magic Numbers";
}

sub description {
  return "All fixed values will be defined constants.";
}

sub detailed_description { return <<"END_DESC"
<p><b>Rationale</b><br>
Using fixed values(Magic Number) in code makes it difficult to know why the engineer chose that number and makes it hard to adapt and extend the program.
Magic numbers should be replaced with name constants to make them more usable.</p>
<p><b>Exceptions</b><br>
Select if bitfield definitions should allow magic numbers.<br>
Any exceptions should be in a comma delimited list of  literals that will not be tested. For example: 0,1,1024</p>
END_DESC
}

sub test_language {
  my $language = shift;
  return $language =~ /C\+\+/;
}

sub test_entity {
  return 1;
}

sub test_global {
  return 0;
}

sub define_options{
  my $check = shift;
  $check->option->checkbox('bitfield','Allow Bitfield definitions',0);
  $check->option->checkbox('bitShift','Allow bit shift operations',0);
  $check->option->checkbox('pureVirtual','Allow Pure Virtual Functions',1);
  $check->option->checkbox('multiple','Show multiple violations per statement',0);
  $check->option->checkbox( 'pragma', 'Check pragma directives', 0 );
  $check->option->text('exceptions','Exception List (Comma Delimited)',''); 
}

sub check {
  my $check = shift;
  my $file = shift;
  return unless $file->kind->check("c file ~unknown ~unresolved");
  
  my $lexer = $file->lexer;
  return unless $lexer;
  my $lexeme = $lexer->first;
   
  my $textList = $check->option->lookup('exceptions');
  $textList =~ s/\s//g; #Strip whitespace in list;
  my @exceptions = split(',',$textList);
   
  while ($lexeme){
    #Yield to GUI interupts
    $check->yield();
    return if $check->is_abort();
    
    if ($lexeme->inactive){
      #noop
    }elsif ($lexeme && ($lexeme->token() eq "Keyword") && ($lexeme->text() eq "asm")){
    while ($lexeme->next && ($lexeme->next()->token() ne "Keyword") && ($lexeme->text ne "endasm")){
      $lexeme = $lexeme->next;
    }
    
  }elsif  (isInitialization($lexeme) || ($check->option->lookup('bitfield') && isBitField($lexeme)) || ($check->option->lookup('pureVirtual') && isPureVirtual($lexeme))){
      while($lexeme->next() && !(($lexeme->next()->token() eq "Punctuation") && ($lexeme->next()->text() eq ";"))){
        $lexeme = $lexeme->next;
      }
    
    }elsif(isMacroDeclaration($lexeme)){
      while($lexeme->next() && !(($lexeme->next()->token() eq "Newline"))) {
        $lexeme = $lexeme->next;
      }
    }elsif(isEnumeratorDeclaration($lexeme)){
      while($lexeme->next() &&
      !(($lexeme->next()->token() eq "Punctuation") && ($lexeme->next()->text() eq "}")) &&
      !(($lexeme->next()->token() eq "Operator") && ($lexeme->next()->text() eq ","))) {
        $lexeme = $lexeme->next();
      }
    }elsif ($lexeme->token() eq "Literal" && ( ! @exceptions ||  ! ($lexeme->text ~~ @exceptions))){

      if ( !( $check->option->lookup( 'pragma' ) ) and isPragma( $lexeme ) ) {

        while($lexeme->next() && !(($lexeme->next()->token() eq "Newline"))) {
          $lexeme = $lexeme->next;
        }

      } elsif ( $check->option->lookup( 'bitShift' ) && isBitShift( $lexeme ) ) {

        $lexeme = $lexeme->next;

      } else {

        #Get entity associated with literal
        my $searchLex = $lexeme;
        while ($searchLex && ! $searchLex->ent){
            last() if $searchLex->text =~ /^[;}]$/ && $searchLex->token eq "Punctuation";
            $searchLex = $searchLex->previous;
        }
        my $ent=0;
        $ent = $searchLex->ent if ($searchLex);
        $check->violation($ent,$file,$lexeme->line_begin,$lexeme->column_begin,ERR1,$lexeme->text) if $ent && $ent->type !~ m/const/;
        #Only register one violation per statement when multiple is not selected
        while(!($check->option->lookup('multiple')) && $lexeme->next() && !(($lexeme->next()->token() eq "Punctuation") && ($lexeme->next()->text() eq ";"))){
          $lexeme = $lexeme->next;
        }
      }
    }
      $lexeme = $lexeme->next;
  }

}


sub isInitialization($)
{
    my ($lexeme) = @_;
    my $t = $lexeme->token();
    my $r = $lexeme->ref();
    my $e = $lexeme->ent();
    
    if($r && $r->kindname() eq "Init" &&  $e->kind()->check("Object"))
    {
      return 1;
    }
}

sub isPureVirtual($)
{
  my ($lexeme) = @_;
  my $t = $lexeme->token();
    my $r = $lexeme->ref();
    my $e = $lexeme->ent();
    
    if($r && $r->kind->check("declarein") &&  $e->kind()->check("Pure Virtual"))
    {
      return 1;
    }
}

sub isBitField($)
{
    my ($lexeme) = @_;
    my $t = $lexeme->token();
    my $r = $lexeme->ref();
    my $e = $lexeme->ent();
    
    if($r && $r->kind->check("definein") &&  $e->kind()->check("Object") && $e->freetext("Bitfield"))
    {
      return 1;
    }
}

sub isBitShift($)
{
  my ($lexeme) = @_;
  my $test = 0;
  $test = 1 if $lexeme->prevUseful->text eq '<<';
  $test = 1 if $lexeme->prevUseful->text eq '>>';
  $test = 1 if $lexeme->nextUseful->text eq '<<';
  $test = 1 if $lexeme->nextUseful->text eq '>>';
  return $test;
}


sub isMacroDeclaration($)
{
    my ($lexeme) = @_;
    my $r_val = 0;
    my $t = $lexeme->token();
    my $r = $lexeme->ref();
    my $e = $lexeme->ent();
    
    if($t && $r && $e &&
       $t eq "Identifier" &&
       $r->kind->check("Definein,setby") &&
       $e->kind()->check("Macro")
  )
    {
  $r_val = 1;
    }
    return $r_val;
}


sub isEnumeratorDeclaration($)
{
    my ($lexeme) = @_;
    my $r_val = 0;
    my $t = $lexeme->token();
    my $r = $lexeme->ref();
    my $e = $lexeme->ent();
    
    if($t && $r && $e &&
       $t eq "Identifier" &&
       $r->kind->check("Definein,setby") &&
       $e->kind()->check("Enumerator")
  )
    {
  $r_val = 1;
    }
    return $r_val;
}


sub isPragma($) 
{
  my ( $lexeme ) = @_;
  while( $lexeme->previous() && !( ( $lexeme->previous()->token() eq "Newline" ) ) ) {
    if ( $lexeme->token eq 'Preprocessor' and $lexeme->text eq 'pragma' ) {
      return 1;
    }
    $lexeme = $lexeme->previous;
  }
  return 0;
}