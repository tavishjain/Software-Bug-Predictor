<p><b>1.1.1.5. core.StackAddressEscape (C)</b><br>
Check that addresses to stack memory do not escape the function.</p>
<p>Examples:
<pre><div class="highlight"><pre><span></span><span class="kt">char</span> <span class="k">const</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">test</span><span class="p">()</span> <span class="p">{</span>
  <span class="kt">char</span> <span class="k">const</span> <span class="n">str</span><span class="p">[]</span> <span class="o">=</span> <span class="s">"string"</span><span class="p">;</span>
  <span class="n">p</span> <span class="o">=</span> <span class="n">str</span><span class="p">;</span> <span class="c1">// warn</span>
<span class="p">}</span>

<span class="kt">void</span><span class="o">*</span> <span class="nf">test</span><span class="p">()</span> <span class="p">{</span>
   <span class="k">return</span> <span class="n">__builtin_alloca</span><span class="p">(</span><span class="mi">12</span><span class="p">);</span> <span class="c1">// warn</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">test</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">static</span> <span class="kt">int</span> <span class="o">*</span><span class="n">x</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">y</span><span class="p">;</span>
  <span class="n">x</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">y</span><span class="p">;</span> <span class="c1">// warn</span>
<span class="p">}</span>
</pre></div></pre></p>