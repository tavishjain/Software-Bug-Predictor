<p><b>1.2.2.11. alpha.core.StackAddressAsyncEscape (C)</b><br>
Check that addresses to stack memory do not escape the function that involves dispatch_after or dispatch_async. This checker is a part of <code class="docutils literal notranslate"><span class="pre">core.StackAddressEscape</span></code>, but is temporarily disabled until some false positives are fixed.</p>
<p>Examples:
<pre><div class="highlight"><pre><span></span><span class="n">dispatch_block_t</span> <span class="nf">test_block_inside_block_async_leak</span><span class="p">()</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">123</span><span class="p">;</span>
  <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">inner</span><span class="p">)(</span><span class="kt">void</span><span class="p">)</span> <span class="o">=</span> <span class="o">^</span><span class="kt">void</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
    <span class="o">++</span><span class="n">y</span><span class="p">;</span>
  <span class="p">};</span>
  <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">outer</span><span class="p">)(</span><span class="kt">void</span><span class="p">)</span> <span class="o">=</span> <span class="o">^</span><span class="kt">void</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">z</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
    <span class="o">++</span><span class="n">z</span><span class="p">;</span>
    <span class="n">inner</span><span class="p">();</span>
  <span class="p">};</span>
  <span class="k">return</span> <span class="n">outer</span><span class="p">;</span> <span class="c1">// warn: address of stack-allocated block is captured by a</span>
                <span class="c1">//       returned block</span>
<span class="p">}</span>
</pre></div></pre></p>