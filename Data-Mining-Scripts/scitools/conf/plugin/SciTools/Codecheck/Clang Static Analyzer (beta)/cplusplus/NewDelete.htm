<p><b>1.1.2.2. cplusplus.NewDelete (C++)</b><br>
Check for double-free and use-after-free problems. Traces memory managed by new/delete.</p>
<p>Examples:
<pre><div class="highlight"><pre><span></span><span class="kt">void</span> <span class="nf">f</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">p</span><span class="p">);</span>

<span class="kt">void</span> <span class="nf">testUseMiddleArgAfterDelete</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">p</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">delete</span> <span class="n">p</span><span class="p">;</span>
  <span class="n">f</span><span class="p">(</span><span class="n">p</span><span class="p">);</span> <span class="c1">// warn: use after free</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nc">SomeClass</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
  <span class="kt">void</span> <span class="n">f</span><span class="p">();</span>
<span class="p">};</span>

<span class="kt">void</span> <span class="nf">test</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">SomeClass</span> <span class="o">*</span><span class="n">c</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SomeClass</span><span class="p">;</span>
  <span class="k">delete</span> <span class="n">c</span><span class="p">;</span>
  <span class="n">c</span><span class="o">-&gt;</span><span class="n">f</span><span class="p">();</span> <span class="c1">// warn: use after free</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">test</span><span class="p">()</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="n">__builtin_alloca</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
  <span class="k">delete</span> <span class="n">p</span><span class="p">;</span> <span class="c1">// warn: deleting memory allocated by alloca</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">test</span><span class="p">()</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">;</span>
  <span class="k">delete</span> <span class="n">p</span><span class="p">;</span>
  <span class="k">delete</span> <span class="n">p</span><span class="p">;</span> <span class="c1">// warn: attempt to free released</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">test</span><span class="p">()</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
  <span class="k">delete</span> <span class="o">&amp;</span><span class="n">i</span><span class="p">;</span> <span class="c1">// warn: delete address of local</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">test</span><span class="p">()</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
  <span class="k">delete</span><span class="p">[]</span> <span class="p">(</span><span class="o">++</span><span class="n">p</span><span class="p">);</span>
    <span class="c1">// warn: argument to 'delete[]' is offset by 4 bytes</span>
    <span class="c1">// from the start of memory allocated by 'new[]'</span>
<span class="p">}</span>
</pre></div></pre></p>