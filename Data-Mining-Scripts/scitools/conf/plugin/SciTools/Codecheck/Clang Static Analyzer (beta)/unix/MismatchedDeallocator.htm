<p><b>1.1.7.4. unix.MismatchedDeallocator (C, C++)</b><br>
Check for mismatched deallocators.</p>
<p>Examples:
<pre><div class="highlight"><pre><span></span><span class="c1">// C, C++</span>
<span class="kt">void</span> <span class="nf">test</span><span class="p">()</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
  <span class="n">delete</span> <span class="n">p</span><span class="p">;</span> <span class="c1">// warn</span>
<span class="p">}</span>

<span class="c1">// C, C++</span>
<span class="kt">void</span> <span class="nf">__attribute</span><span class="p">((</span><span class="n">ownership_returns</span><span class="p">(</span><span class="n">malloc</span><span class="p">)))</span> <span class="o">*</span><span class="n">user_malloc</span><span class="p">(</span><span class="kt">size_t</span><span class="p">);</span>

<span class="kt">void</span> <span class="nf">test</span><span class="p">()</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="n">user_malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
  <span class="n">delete</span> <span class="n">p</span><span class="p">;</span> <span class="c1">// warn</span>
<span class="p">}</span>

<span class="c1">// C, C++</span>
<span class="kt">void</span> <span class="nf">test</span><span class="p">()</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">new</span> <span class="kt">int</span><span class="p">;</span>
  <span class="n">free</span><span class="p">(</span><span class="n">p</span><span class="p">);</span> <span class="c1">// warn</span>
<span class="p">}</span>

<span class="c1">// C, C++</span>
<span class="kt">void</span> <span class="nf">test</span><span class="p">()</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">new</span> <span class="kt">int</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
  <span class="n">realloc</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">long</span><span class="p">));</span> <span class="c1">// warn</span>
<span class="p">}</span>

<span class="c1">// C, C++</span>
<span class="n">template</span> <span class="o">&lt;</span><span class="kr">typename</span> <span class="n">T</span><span class="o">&gt;</span>
<span class="k">struct</span> <span class="n">SimpleSmartPointer</span> <span class="p">{</span>
  <span class="n">T</span> <span class="o">*</span><span class="n">ptr</span><span class="p">;</span>

  <span class="n">explicit</span> <span class="nf">SimpleSmartPointer</span><span class="p">(</span><span class="n">T</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span> <span class="o">:</span> <span class="n">ptr</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="p">{}</span>
  <span class="o">~</span><span class="n">SimpleSmartPointer</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">delete</span> <span class="n">ptr</span><span class="p">;</span> <span class="c1">// warn</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="kt">void</span> <span class="nf">test</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">SimpleSmartPointer</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">a</span><span class="p">((</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="mi">4</span><span class="p">));</span>
<span class="p">}</span>

<span class="c1">// C++</span>
<span class="kt">void</span> <span class="nf">test</span><span class="p">()</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="n">operator</span> <span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
  <span class="n">delete</span><span class="p">[]</span> <span class="n">p</span><span class="p">;</span> <span class="c1">// warn</span>
<span class="p">}</span>

<span class="c1">// Objective-C, C++</span>
<span class="kt">void</span> <span class="nf">test</span><span class="p">(</span><span class="n">NSUInteger</span> <span class="n">dataLength</span><span class="p">)</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">new</span> <span class="kt">int</span><span class="p">;</span>
  <span class="n">NSData</span> <span class="o">*</span><span class="n">d</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSData</span> <span class="nl">dataWithBytesNoCopy</span><span class="p">:</span><span class="n">p</span>
               <span class="nl">length</span><span class="p">:</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="nl">freeWhenDone</span><span class="p">:</span><span class="mi">1</span><span class="p">];</span>
    <span class="c1">// warn +dataWithBytesNoCopy:length:freeWhenDone: cannot take</span>
    <span class="c1">// ownership of memory allocated by 'new'</span>
<span class="p">}</span>

</pre></div></pre></p>