use base ("Understand::Graph::Gv");
use Tie::RefHash;

sub name { return "Object References"; }

sub test_entity {
    my $entity = shift;
    return $entity->kind()->check("Object, Macro, Variable, Field, Property") ? 1 : -1;
}

sub test_global { return -1; }

sub init {
    my $graph = shift;
    $graph->options()->define("Layout", ["Horizontal", "Vertical"], "Vertical");
    $graph->options()->define("Type", ["Off", "On"], "Off");
    $graph->options()->define("References", ["Simple", "All"], "All");
    $graph->options()->define("Define/Declare", ["Off", "On"], "Off");
#    $graph->options()->define("Inactive", ["Off", "On"], "On");
    $graph->options()->define("Legend", ["On", "Off"], "On");
    
    $graph->legend->define("entStart", "ellipse", "Object Graphed", "#000000", "#FFFFFF", "0,0");
    $graph->legend->define("entFn", "roundedrect", "Function/Method", "blue", "#FFFFFF", "1,0");
    $graph->legend->define("entOther", "roundedrect", "General Entity", "black", "#FFFFFF", "2,0");
    $graph->legend->define("refInactive", "arrow", "Ref: Inactive (Gray Text)", "#808080", "#808080", "3,0");
    
    $graph->legend->define("refUseby", "arrow", "Ref: Use by", "blue", "blue", "0,1");
    $graph->legend->define("refSetby", "arrow", "Ref: Set by", "darkgreen", "darkgreen", "1,1");
    $graph->legend->define("refModby", "arrow", "Ref: Modify by", "crimson", "crimson", "2,1");
    $graph->legend->define("refDefDec", "arrow", "Ref: Define/Declare in", "dimgray", "dimgray", "3,1");
}

sub do_load {
    my $graph = shift;
    my $var = shift;

    reset_graph($graph);
    my $rankdir = "TB";
    $rankdir = "LR" if ($graph->options()->lookup("Layout") eq "Horizontal");
    $graph->default("rankdir", $rankdir, "graph");
    draw($graph, $var);
}

sub draw {
    my $graph = shift;
    my $var = shift;

    my $varname;
    $varname = ($var->type() ? $var->type() : "unknown")."\n" if $graph->options()->lookup("Type") eq "On";
    $varname .= $var->longname();
    my $varnode = $graph->node($var, $varname);
    $varnode->set("shape", "oval");

    my $uniq = $graph->options()->lookup("References") eq "All" ? 0 : 1;
    my $qual = $graph->options()->lookup("Inactive") eq "Off" ? " ~inactive" : "";
    my @refs;
    push @refs, $var->refs("Definein $qual, Declarein $qual", "", $uniq) if $graph->options()->lookup("Define/Declare") eq "On";
    push @refs, $var->refs("SetBy Init $qual", "", $uniq);
    push @refs, $var->refs("SetBy ~Init $qual, Modifyby $qual", "", $uniq);
    push @refs, $var->refs("UseBy Return $qual", "", $uniq);
    push @refs, $var->refs("UseBy ~Return $qual", "", $uniq);

    foreach my $ref (@refs) {
        my $ent = $ref->ent();
        my $filename = "";

        if ($graph->options()->lookup("References") eq "All") {
            $filename = sprintf "\n%s(%d)", $ref->file()->name(), $ref->line();
        }

        my $name = $ent->longname();
        $name = $ent->name() if $ent->kindname() =~ /File/;

        my $refnode = $graph->node($ent, $name.$filename);
        $refnode->set("shape", "rectangle");
        $refnode->set("color", "blue") if $ent->kind->check("Function, Method");

        my ($src, $dst);
        if ($ref->kind()->check("UseBy, TypedBy")) {
            $src = $varnode;
            $dst = $refnode;
        } else {
            $src = $refnode;
            $dst = $varnode;
        }

        my $edge = $graph->edge($src, $dst);
        $edge->set("label", $ref->kindname());
        $edge->sync($ref->file(), $ref->line(), $ref->column()) if $graph->options()->lookup("References") eq "All";

        $edge->set("color", "blue") if $ref->kind->check("Useby");
        $edge->set("color", "darkgreen") if $ref->kind->check("Setby");
        $edge->set("color", "crimson") if $ref->kind->check("Modifyby");
        $edge->set("color", "dimgray") if $ref->kind->check("Definein, Declarein");

        if ($ref->kind()->check("Inactive")) {
            $edge->set("color", "#808080");
            $edge->set("fontcolor", "#696969");
        }
    }
}

sub reset_graph()
{
    my $graph = shift;
    $graph->default("shape",     "box",   "node");
    $graph->default("color",     "black", "node");
    $graph->default("fontcolor", "black", "node");
    $graph->default("color",     "black", "edge");
    $graph->default("fillcolor", "white", "node");
}
